import { useDataTable } from '@/components/data-table/hooks/use-data-table';
import { router, usePage } from '@inertiajs/react';
import { useEffect, useMemo, useRef, useState } from 'react';
import { useQueryParams } from '@/hooks/use-query-params';
import { {{ resource_name_pascal }}Data, PaginatedResponse, SharedData } from '@/types';
import {{ resource_name_pascal }}Controller from '@/actions/Modules/{{ module_name_pascal }}/Http/Controllers/{{ resource_name_pascal }}Controller';

export const use{{ resource_name_pascal }}Table = ({ data }: { data: PaginatedResponse<{{ resource_name_pascal }}Data> }) => {
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [isPendingDeleteBulk, setIsPendingDeleteBulk] = useState<boolean>(false);
    const [withTrashed, setWithTrashed] = useState<'without-trashed' | 'with-trashed' | 'only-trashed'>('without-trashed');
    const isFirstRender = useRef(true);

    const query = useQueryParams();

    const { ziggy } = usePage<SharedData>().props;

    const currentPath = useMemo(() => {
        if (ziggy?.location) {
            try {
                return new URL(ziggy.location).pathname || '/';
            } catch {
                if (typeof window !== 'undefined') {
                    return window.location.pathname;
                }
            }
        }

        if (typeof window !== 'undefined') {
            return window.location.pathname;
        }

        return '/';
    }, [ziggy?.location]);

    const {
        sorting, setSorting,
        globalFilter, setGlobalFilter,
        rowSelection, setRowSelection,
        columnVisibility, setColumnVisibility
    } = useDataTable();

    useEffect(() => {
        if (isFirstRender.current) {
            isFirstRender.current = false;
            return;
        }
        setIsLoading(true);

        const sort = sorting.map((s) => `${s.id}:${s.desc ? 'desc' : 'asc'}`).join(',');

        router.get(
            currentPath,
            {
                ...query,
                filter: globalFilter,
                sort,
                withTrashed,
            },
            {
                preserveState: true,
                replace: true,
                onFinish: () => setIsLoading(false),
            },
        );
    }, [globalFilter, sorting, withTrashed, currentPath, query]);

    useEffect(() => {
        if (query.withTrashed) {
            setWithTrashed(query.withTrashed as 'without-trashed' | 'with-trashed' | 'only-trashed');
        }
    }, [query]);

    const deleteBulk = (ids: number[]) => {
        router.delete({{ resource_name_pascal }}Controller.destroyBulk.url({ query: { ids: ids as unknown as string[] } }), {
            preserveScroll: true,
            onStart: () => setIsPendingDeleteBulk(true),
            onFinish: () => setIsPendingDeleteBulk(false),
        });
    };

    return {
        sorting, setSorting,
        globalFilter, setGlobalFilter,
        rowSelection, setRowSelection,
        columnVisibility, setColumnVisibility,
        data,
        isLoading,
        deleteBulk,
        isPendingDeleteBulk,
        setWithTrashed,
        withTrashed,
    };
};
